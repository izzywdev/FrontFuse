name: Deploy FuzeFront Website

on:
  push:
    branches: [ main, fuzefront-website ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: fuzefront-website-backend
  ECR_REPOSITORY_FRONTEND: fuzefront-website-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          fuzefront-website/backend/package-lock.json
          fuzefront-website/frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./fuzefront-website/backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./fuzefront-website/frontend
      run: npm ci

    - name: Run backend tests
      working-directory: ./fuzefront-website/backend
      run: npm test

    - name: Run backend linting
      working-directory: ./fuzefront-website/backend
      run: npm run lint

    - name: Run backend type checking
      working-directory: ./fuzefront-website/backend
      run: npm run type-check

    - name: Run frontend linting
      working-directory: ./fuzefront-website/frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./fuzefront-website/frontend
      run: npm run type-check

    - name: Build frontend
      working-directory: ./fuzefront-website/frontend
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repositories if they don't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND --region $AWS_REGION
        
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_FRONTEND --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_FRONTEND --region $AWS_REGION

    - name: Build and push backend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fuzefront-website/backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build and push frontend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fuzefront-website/frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    outputs:
      asg_name: fuzefront-website-production-asg
      alb_dns_name: fuzefront-website-production-alb-717394184.us-east-1.elb.amazonaws.com
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify existing infrastructure
      run: |
        echo "Using existing infrastructure:"
        echo "Auto Scaling Group: fuzefront-website-production-asg"
        echo "Load Balancer: fuzefront-website-production-alb-717394184.us-east-1.elb.amazonaws.com"
        
        # Verify ASG exists
        aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names fuzefront-website-production-asg \
          --query 'AutoScalingGroups[0].AutoScalingGroupName' \
          --output text
        
        # Verify ALB exists  
        aws elbv2 describe-load-balancers \
          --names fuzefront-website-production-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get running instances from Auto Scaling Group
      id: get-instances
      run: |
        echo "Getting running instances from ASG: ${{ needs.deploy-infrastructure.outputs.asg_name }}"
        
        # Get healthy instances from ASG
        INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names ${{ needs.deploy-infrastructure.outputs.asg_name }} \
          --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService` && HealthStatus==`Healthy`].InstanceId' \
          --output text)
        
        echo "Found healthy instances: $INSTANCES"
        
        if [ -z "$INSTANCES" ]; then
          echo "ERROR: No healthy instances found in ASG"
          exit 1
        fi
        
        # Use the first healthy instance
        INSTANCE_ID=$(echo $INSTANCES | awk '{print $1}')
        echo "Using instance: $INSTANCE_ID"
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Deploy to existing instance
      run: |
        INSTANCE_ID="${{ steps.get-instances.outputs.instance_id }}"
        echo "Deploying to instance: $INSTANCE_ID"
        
        # Execute deployment script on the instance
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["/opt/fuzefront-website/deploy.sh"]' \
          --query 'Command.CommandId' \
          --output text > command_id.txt
        
        COMMAND_ID=$(cat command_id.txt)
        echo "Command ID: $COMMAND_ID"
        
        # Wait for command to complete
        echo "Waiting for deployment to complete..."
        aws ssm wait command-executed \
          --command-id $COMMAND_ID \
          --instance-id $INSTANCE_ID
        
        # Get command output
        echo "Deployment output:"
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id $INSTANCE_ID \
          --query 'StandardOutputContent' \
          --output text

    - name: Verify deployment
      run: |
        ALB_DNS="${{ needs.deploy-infrastructure.outputs.alb_dns_name }}"
        echo "Load Balancer DNS: $ALB_DNS"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        for i in {1..30}; do
          if curl -f "http://$ALB_DNS/health"; then
            echo "Health check passed!"
            break
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done

  notify:
    needs: [test, build-and-push, deploy-infrastructure, deploy-application]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
      run: |
        if [ "${{ needs.deploy-application.result }}" == "success" ]; then
          echo "✅ Deployment successful! Website is live at https://${{ secrets.DOMAIN_NAME }}"
        else
          echo "❌ Deployment failed. Check the logs for details."
        fi