name: Deploy FuzeFront Website

on:
  push:
    branches: [ main, fuzefront-website ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: fuzefront-website-backend
  ECR_REPOSITORY_FRONTEND: fuzefront-website-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          fuzefront-website/backend/package-lock.json
          fuzefront-website/frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./fuzefront-website/backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./fuzefront-website/frontend
      run: npm ci

    - name: Run backend tests
      working-directory: ./fuzefront-website/backend
      run: npm test

    - name: Run backend linting
      working-directory: ./fuzefront-website/backend
      run: npm run lint

    - name: Run backend type checking
      working-directory: ./fuzefront-website/backend
      run: npm run type-check

    - name: Run frontend linting
      working-directory: ./fuzefront-website/frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./fuzefront-website/frontend
      run: npm run type-check

    - name: Build frontend
      working-directory: ./fuzefront-website/frontend
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repositories if they don't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND --region $AWS_REGION
        
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_FRONTEND --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_FRONTEND --region $AWS_REGION

    - name: Build and push backend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fuzefront-website/backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build and push frontend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fuzefront-website/frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    outputs:
      asg_name: ${{ steps.terraform-outputs.outputs.asg_name }}
      alb_dns_name: ${{ steps.terraform-outputs.outputs.alb_dns_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./fuzefront-website/infrastructure
      run: terraform init

    - name: Terraform Plan
      working-directory: ./fuzefront-website/infrastructure
      run: |
        terraform plan \
          -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
          -var="ssl_email=${{ secrets.SSL_EMAIL }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: ./fuzefront-website/infrastructure
      run: |
        set +e  # Don't exit on error
        terraform apply tfplan
        APPLY_EXIT_CODE=$?
        
        if [ $APPLY_EXIT_CODE -ne 0 ]; then
          echo "Terraform apply failed, checking for resource conflicts..."
          
          # Import existing resources if they exist
          echo "Checking and importing existing resources..."
          
          # Import key pair if it exists
          if aws ec2 describe-key-pairs --key-names fuzefront-website-production-key &>/dev/null; then
            echo "Importing existing key pair..."
            terraform import 'aws_key_pair.main[0]' 'fuzefront-website-production-key' || true
          fi
          
          # Import target group if it exists
          if aws elbv2 describe-target-groups --names fuzefront-website-production-tg &>/dev/null; then
            echo "Importing existing target group..."
            TG_ARN=$(aws elbv2 describe-target-groups --names fuzefront-website-production-tg --query 'TargetGroups[0].TargetGroupArn' --output text)
            terraform import aws_lb_target_group.main "$TG_ARN" || true
          fi
          
          # Import load balancer if it exists
          if aws elbv2 describe-load-balancers --names fuzefront-website-production-alb &>/dev/null; then
            echo "Importing existing load balancer..."
            ALB_ARN=$(aws elbv2 describe-load-balancers --names fuzefront-website-production-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text)
            terraform import aws_lb.main "$ALB_ARN" || true
          fi
          
          # Import auto scaling group if it exists
          if aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names fuzefront-website-production-asg &>/dev/null; then
            echo "Importing existing auto scaling group..."
            terraform import aws_autoscaling_group.main fuzefront-website-production-asg || true
          fi
          
          # Create new plan after imports and apply
          echo "Creating new plan after imports..."
          terraform plan \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ssl_email=${{ secrets.SSL_EMAIL }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -out=tfplan-after-import
          
          echo "Applying updated plan..."
          terraform apply tfplan-after-import
        fi

    - name: Get Terraform outputs
      working-directory: ./fuzefront-website/infrastructure
      id: terraform-outputs
      run: |
        echo "alb_dns_name=$(terraform output -raw load_balancer_dns_name)" >> $GITHUB_OUTPUT
        echo "asg_name=$(terraform output -raw autoscaling_group_name)" >> $GITHUB_OUTPUT
        # Route53 outputs are disabled, so we skip them
        echo "zone_id=" >> $GITHUB_OUTPUT
        echo "name_servers=[]" >> $GITHUB_OUTPUT

    - name: Update Route53 if needed
      run: |
        echo "Please update your domain's nameservers to:"
        echo "${{ steps.terraform-outputs.outputs.name_servers }}"

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Auto Scaling Group name from previous job
      id: asg-name
      run: |
        ASG_NAME="${{ needs.deploy-infrastructure.outputs.asg_name }}"
        echo "Getting ASG name from infrastructure job output: '$ASG_NAME'"
        
        if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" = "null" ]; then
          echo "ERROR: No Auto Scaling Group name found in infrastructure outputs"
          exit 1
        fi
        
        echo "Using ASG: $ASG_NAME"
        echo "asg_name=$ASG_NAME" >> $GITHUB_OUTPUT

    - name: Update Auto Scaling Group to force instance refresh
      run: |
        echo "Starting instance refresh for ASG: ${{ steps.asg-name.outputs.asg_name }}"
        
        # Check if an instance refresh is already in progress
        REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
          --auto-scaling-group-name ${{ steps.asg-name.outputs.asg_name }} \
          --query 'InstanceRefreshes[0].Status' --output text 2>/dev/null || echo "None")
        
        if [ "$REFRESH_STATUS" = "InProgress" ]; then
          echo "Instance refresh already in progress, cancelling existing refresh..."
          REFRESH_ID=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{ steps.asg-name.outputs.asg_name }} \
            --query 'InstanceRefreshes[0].InstanceRefreshId' --output text)
          aws autoscaling cancel-instance-refresh \
            --auto-scaling-group-name ${{ steps.asg-name.outputs.asg_name }} \
            --instance-refresh-id $REFRESH_ID
          echo "Waiting for cancellation to complete..."
          sleep 30
        fi
        
        # Start new instance refresh
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{ steps.asg-name.outputs.asg_name }} \
          --preferences MinHealthyPercentage=50,InstanceWarmup=300,CheckpointPercentages=50

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for instance refresh to complete..."
        
        # Set timeout to 20 minutes (1200 seconds)
        TIMEOUT=1200
        START_TIME=$(date +%s)
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          
          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "Timeout reached (${TIMEOUT}s). Instance refresh may still be in progress."
            exit 1
          fi
          
          STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{ steps.asg-name.outputs.asg_name }} \
            --query 'InstanceRefreshes[0].Status' --output text)
          
          echo "Instance refresh status: $STATUS (${ELAPSED}s elapsed)"
          
          if [ "$STATUS" = "Successful" ]; then
            echo "Instance refresh completed successfully!"
            break
          elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
            echo "Instance refresh failed or was cancelled. Status: $STATUS"
            exit 1
          fi
          
          sleep 30
        done

    - name: Verify deployment
      working-directory: ./fuzefront-website/infrastructure
      run: |
        # Get the load balancer DNS name from Terraform output
        ALB_DNS=$(terraform output -raw load_balancer_dns_name)
        echo "Load Balancer DNS: $ALB_DNS"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        for i in {1..30}; do
          if curl -f "http://$ALB_DNS/health"; then
            echo "Health check passed!"
            break
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done

  notify:
    needs: [test, build-and-push, deploy-infrastructure, deploy-application]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
      run: |
        if [ "${{ needs.deploy-application.result }}" == "success" ]; then
          echo "✅ Deployment successful! Website is live at https://${{ secrets.DOMAIN_NAME }}"
        else
          echo "❌ Deployment failed. Check the logs for details."
        fi