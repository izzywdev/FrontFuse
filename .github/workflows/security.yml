name: Security Scanning

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    - cron: '0 2 * * 1' # Weekly scan on Mondays

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --package-lock-only

      - name: Run security audit
        run: |
          npm audit --audit-level=high --production
          cd frontend && npm audit --audit-level=high --production
          cd ../backend && npm audit --audit-level=high --production
          cd ../sdk && npm audit --audit-level=high --production
          cd ../shared && npm audit --audit-level=high --production
          cd ../task-manager-app && npm audit --audit-level=high --production

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images for scanning
        run: |
          docker build -t frontfuse/backend:latest ./backend
          docker build -t frontfuse/frontend:latest ./frontend
          docker build -t frontfuse/task-manager:latest ./task-manager-app

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontfuse/backend:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_TOKEN: ${{ secrets.TRIVY_TOKEN }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        env:
          TRUFFLEHOG_TOKEN: ${{ secrets.TRUFFLEHOG_TOKEN }}

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Generate SBOM
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file frontfuse-sbom.json
          npx @cyclonedx/cyclonedx-npm --output-format xml --output-file frontfuse-sbom.xml

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-files
          path: |
            frontfuse-sbom.json
            frontfuse-sbom.xml
          retention-days: 30

  # Add new external security tools integration
  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Add monitoring and alerting
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    needs: [codeql-analysis, container-security, secret-scanning]
    if: always()

    steps:
      - name: Security summary
        run: |
          echo "üîê Security Analysis Summary"
          echo "CodeQL: ${{ needs.codeql-analysis.result }}"
          echo "Container Security: ${{ needs.container-security.result }}"
          echo "Secret Scanning: ${{ needs.secret-scanning.result }}"

      - name: Notify security team
        if: failure()
        run: |
          echo "üö® Security issues detected - notifications would be sent to security team"
          echo "Webhook URL: ${{ secrets.SECURITY_WEBHOOK_URL }}"
        env:
          SECURITY_WEBHOOK_URL: ${{ secrets.SECURITY_WEBHOOK_URL }}
