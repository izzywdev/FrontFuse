name: Deploy FuzeFront Website

on:
  push:
    branches: [ main, fuzefront-website ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: fuzefront-website-backend
  ECR_REPOSITORY_FRONTEND: fuzefront-website-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          fuzefront-website/backend/package-lock.json
          fuzefront-website/frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./fuzefront-website/backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./fuzefront-website/frontend
      run: npm ci

    - name: Run backend tests
      working-directory: ./fuzefront-website/backend
      run: npm test

    - name: Run backend linting
      working-directory: ./fuzefront-website/backend
      run: npm run lint

    - name: Run backend type checking
      working-directory: ./fuzefront-website/backend
      run: npm run type-check

    - name: Run frontend linting
      working-directory: ./fuzefront-website/frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./fuzefront-website/frontend
      run: npm run type-check

    - name: Build frontend
      working-directory: ./fuzefront-website/frontend
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repositories if they don't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND --region $AWS_REGION
        
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_FRONTEND --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_FRONTEND --region $AWS_REGION

    - name: Build and push backend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fuzefront-website/backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build and push frontend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fuzefront-website/frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    outputs:
      asg_name: ${{ steps.terraform-outputs.outputs.asg_name }}
      alb_dns_name: ${{ steps.terraform-outputs.outputs.alb_dns_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./fuzefront-website/infrastructure
      run: terraform init

    - name: Terraform Plan
      working-directory: ./fuzefront-website/infrastructure
      run: |
        terraform plan \
          -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
          -var="ssl_email=${{ secrets.SSL_EMAIL }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: ./fuzefront-website/infrastructure
      run: terraform apply tfplan

    - name: Get Terraform outputs
      working-directory: ./fuzefront-website/infrastructure
      id: terraform-outputs
      run: |
        echo "alb_dns_name=$(terraform output -raw load_balancer_dns_name)" >> $GITHUB_OUTPUT
        echo "asg_name=$(terraform output -raw autoscaling_group_name)" >> $GITHUB_OUTPUT
        # Route53 outputs are disabled, so we skip them
        echo "zone_id=" >> $GITHUB_OUTPUT
        echo "name_servers=[]" >> $GITHUB_OUTPUT

    - name: Update Route53 if needed
      run: |
        echo "Please update your domain's nameservers to:"
        echo "${{ steps.terraform-outputs.outputs.name_servers }}"

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
        chmod 600 /tmp/ssh_key

    - name: Get running instances from Auto Scaling Group
      id: get-instances
      run: |
        echo "Getting running instances from ASG: ${{ needs.deploy-infrastructure.outputs.asg_name }}"
        
        # Get healthy instances from ASG
        INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names ${{ needs.deploy-infrastructure.outputs.asg_name }} \
          --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
          --output text)
        
        echo "Found instances: $INSTANCES"
        
        if [ -z "$INSTANCES" ]; then
          echo "ERROR: No instances found in ASG"
          exit 1
        fi
        
        # Use the first instance
        INSTANCE_ID=$(echo $INSTANCES | awk '{print $1}')
        echo "Using instance: $INSTANCE_ID"
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Get instance IP address
      id: get-ip
      run: |
        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.get-instances.outputs.instance_id }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "Instance IP: $INSTANCE_IP"
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

    - name: Deploy to existing instance via SSH
      run: |
        INSTANCE_IP="${{ steps.get-ip.outputs.instance_ip }}"
        echo "Deploying to instance: $INSTANCE_IP"
        
        # Wait for SSH to be available
        echo "Waiting for SSH to be available..."
        for i in {1..30}; do
          if ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@$INSTANCE_IP 'echo "SSH OK"'; then
            echo "SSH connection successful"
            break
          fi
          echo "SSH attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        
        # Set environment variables and execute deployment
        ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP << 'EOF'
        export AWS_REGION=${{ env.AWS_REGION }}
        export ECR_REPOSITORY_BACKEND=${{ env.ECR_REPOSITORY_BACKEND }}
        export ECR_REPOSITORY_FRONTEND=${{ env.ECR_REPOSITORY_FRONTEND }}
        
        # Execute deployment script
        sudo /opt/fuzefront-website/deploy.sh
        EOF

    - name: Verify deployment
      run: |
        ALB_DNS="${{ needs.deploy-infrastructure.outputs.alb_dns_name }}"
        echo "Load Balancer DNS: $ALB_DNS"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        for i in {1..30}; do
          if curl -f "http://$ALB_DNS/health"; then
            echo "Health check passed!"
            break
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done

  notify:
    needs: [test, build-and-push, deploy-infrastructure, deploy-application]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fuzefront-website'
      run: |
        if [ "${{ needs.deploy-application.result }}" == "success" ]; then
          echo "✅ Deployment successful! Website is live at https://${{ secrets.DOMAIN_NAME }}"
        else
          echo "❌ Deployment failed. Check the logs for details."
        fi