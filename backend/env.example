# FrontFuse Backend Environment Variables
# Copy this file to .env and fill in your actual values

# Server Configuration
NODE_ENV=production
PORT=3002

# JWT Authentication
JWT_SECRET=fuzefront-production-secret-change-this-in-production

# Database Configuration
DB_HOST=postgres
DB_PORT=5432
DB_NAME=fuzefront_platform
DB_USER=postgres
DB_PASSWORD=postgres
USE_POSTGRES=true

# PostgreSQL Configuration (Production)
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# Frontend Configuration
FRONTEND_URL=http://localhost:5173

# Authentik Configuration - Uses shared FuzeInfra PostgreSQL and Redis
AUTHENTIK_DB_NAME=authentik
AUTHENTIK_SECRET_KEY=generate-random-secret-in-production-please-change-this-to-a-secure-value
AUTHENTIK_COOKIE_DOMAIN=fuzefront.dev.local
AUTHENTIK_PORT=9000
AUTHENTIK_SSL_PORT=9443
AUTHENTIK_CLIENT_ID=
AUTHENTIK_CLIENT_SECRET=
AUTHENTIK_ISSUER_URL=http://fuzefront.dev.local:9000/application/o/fuzefront/
AUTHENTIK_REDIRECT_URI=http://fuzefront.local:8080/auth/callback

# Permit.io Configuration
PERMIT_API_KEY=permit_key_IbtK6N3JdqcJUTj3kS9rDo2uBdQGG9Q6Urk2qdry8uocAEymmGbJ17P6Cq541uqijVQhyU5idlPHQMVzV59qQ1
PERMIT_DEBUG=true
PERMIT_PDP_URL=http://permit-pdp:7000
PERMIT_OFFLINE_MODE=false
PERMIT_SYNC_INTERVAL=10000

# Permit.io PDP Configuration (Container)
PERMIT_PDP_PORT=7766
PERMIT_OPA_PORT=8181

# NOTE: Permit.io PDP bundles OPA+OPAL internally
# No separate OPAL containers needed

# External Services (Optional)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR_WEBHOOK

# Container Registry (for production deployment)
DOCKER_REGISTRY=ghcr.io
DOCKER_USERNAME=your-username
DOCKER_PASSWORD=your-personal-access-token

# NPM Publishing
NPM_TOKEN=npm_your-npm-access-token

# Security Tool API Keys
SNYK_TOKEN=your-snyk-api-token
TRIVY_TOKEN=your-trivy-api-token
TRUFFLEHOG_TOKEN=your-trufflehog-api-token

# Monitoring & Alerting
SECURITY_WEBHOOK_URL=https://your-security-monitoring-webhook
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Production Database (when moving away from SQLite)
PROD_DATABASE_URL=postgresql://user:password@host:port/database
REDIS_URL=redis://user:password@host:port

# Stytch Configuration (when ready)
STYTCH_PROJECT_ID=your-stytch-project-id
STYTCH_SECRET=your-stytch-secret

# Legacy Permit.io Configuration
PERMIT_IO_PDP_URL_LEGACY=https://cloudpdp.api.permit.io

# Session Configuration
SESSION_SECRET=your-secure-session-secret-here
SESSION_MAX_AGE=86400

# WebSocket Configuration
WEBSOCKET_CORS_ORIGIN=http://localhost:5173

# Port Configuration
BACKEND_PORT=3002
FRONTEND_PORT=8080

# PostgreSQL (from FuzeInfra)
POSTGRES_DB=fuzefront_platform

# Redis (from FuzeInfra) 
# Used by: Authentik, general caching, sessions
# No additional Redis configuration needed

# Frontend Configuration
VITE_API_URL=http://fuzefront.dev.local
VITE_AUTHENTIK_URL=http://fuzefront.dev.local:9000
VITE_APP_TITLE=FuzeFront Platform

# ================================
# SECURITY NOTES
# ================================

# PRODUCTION REQUIREMENTS:
# 1. Generate strong random secrets for all *_SECRET_KEY variables
# 2. Use proper database credentials with limited privileges
# 3. Configure proper CORS origins
# 4. Set NODE_ENV=production
# 5. Use HTTPS in production (set AUTHENTIK_SSL_PORT)
# 6. Obtain real Permit.io API key from https://app.permit.io
# 7. Set PERMIT_DEBUG=False in production for performance

# AUTHENTIK SECURITY:
# - AUTHENTIK_SECRET_KEY should be at least 32 characters
# - Change default database credentials in production
# - Configure proper cookie domain for your domain
# - Review Authentik security settings in admin interface

# PERMIT.IO SECURITY:
# - Keep PERMIT_API_KEY secure and rotate regularly
# - Use environment-specific API keys
# - Enable offline mode in production for resilience
# - Monitor PDP performance and scaling needs 