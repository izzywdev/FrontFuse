version: '3.8'

# External networks from shared infrastructure
networks:
  FuzeInfra:
    external: true
    name: FuzeInfra
  fuzefront:
    name: fuzefront
    driver: bridge

services:
  # ================================
  # BACKEND SERVICE
  # ================================
  fuzefront-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fuzefront-backend
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - USE_POSTGRES=true
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=fuzefront_platform
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=fuzefront-production-secret-change-this-in-production
      - PORT=${BACKEND_PORT:-3002}
      - FRONTEND_URL=http://fuzefront-frontend:${FRONTEND_PORT:-8080}
      - PERMIT_API_KEY=${PERMIT_API_KEY}
      - PERMIT_DEBUG=${PERMIT_DEBUG:-true}
      - PERMIT_PDP_URL=http://permit-pdp:7000
    networks:
      - FuzeInfra # Connect to shared infrastructure
      - fuzefront # Connect to FuzeFront internal network
    # Database initialization handled by backend startup process
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3002/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.fuzefront-backend.rule=PathPrefix(`/api`)'
      - 'traefik.http.services.fuzefront-backend.loadbalancer.server.port=3002'

  # ================================
  # FRONTEND SERVICE
  # ================================
  fuzefront-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://fuzefront.dev.local
        - VITE_APP_TITLE=FuzeFront Platform
    container_name: fuzefront-frontend
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=8080
    networks:
      - FuzeInfra # Connect to shared infrastructure for nginx access
      - fuzefront # Connect to FuzeFront internal network
    depends_on:
      - fuzefront-backend
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.fuzefront-frontend.rule=Host(`fuzefront.local`)'
      - 'traefik.http.services.fuzefront-frontend.loadbalancer.server.port=8080'

  # ================================
  # TASK MANAGER MICROFRONTEND
  # ================================
  fuzefront-taskmanager:
    build:
      context: ./task-manager-app
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://fuzefront.dev.local
        - VITE_APP_TITLE=Task Manager - FuzeFront
    container_name: fuzefront-taskmanager
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=3002
    networks:
      - FuzeInfra # Connect to shared infrastructure for nginx access
      - fuzefront # Connect to FuzeFront internal network
    depends_on:
      - fuzefront-backend
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.fuzefront-taskmanager.rule=Host(`taskmanager.fuzefront.local`)'
      - 'traefik.http.services.fuzefront-taskmanager.loadbalancer.server.port=3002'

  # ================================
  # AUTHENTIK OIDC/OAuth2 AUTHENTICATION
  # ================================
  authentik-server:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: fuzefront-authentik-server
    command: server
    environment:
      # Use shared PostgreSQL from FuzeInfra
      AUTHENTIK_REDIS__HOST: shared-redis
      AUTHENTIK_POSTGRESQL__HOST: shared-postgres
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-postgres}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-generate-random-secret-in-production}
      AUTHENTIK_LOG_LEVEL: info
      AUTHENTIK_COOKIE_DOMAIN: ${AUTHENTIK_COOKIE_DOMAIN:-fuzefront.local}
      AUTHENTIK_DISABLE_UPDATE_CHECK: true
      AUTHENTIK_ERROR_REPORTING__ENABLED: false
      AUTHENTIK_DEFAULT_USER_CHANGE_EMAIL: true
      AUTHENTIK_DEFAULT_USER_CHANGE_NAME: true
      AUTHENTIK_DEFAULT_USER_CHANGE_USERNAME: true
      AUTHENTIK_GDPR_COMPLIANCE: false
    volumes:
      - authentik_media:/media
      - authentik_custom_templates:/templates
    ports:
      - '${AUTHENTIK_PORT:-9000}:9000'
      - '${AUTHENTIK_SSL_PORT:-9443}:9443'
    networks:
      - FuzeInfra # Connect to shared infrastructure for PostgreSQL, Redis, and Traefik
      - fuzefront # Connect to FuzeFront internal network
    external_links:
      - shared-postgres:shared-postgres
      - shared-redis:shared-redis
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'ak', 'healthcheck']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authentik.rule=Host(`auth.fuzefront.local`)'
      - 'traefik.http.services.authentik.loadbalancer.server.port=9000'

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: fuzefront-authentik-worker
    command: worker
    environment:
      # Use shared PostgreSQL and Redis from FuzeInfra
      AUTHENTIK_REDIS__HOST: shared-redis
      AUTHENTIK_POSTGRESQL__HOST: shared-postgres
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-postgres}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-generate-random-secret-in-production}
      AUTHENTIK_LOG_LEVEL: info
      AUTHENTIK_ERROR_REPORTING__ENABLED: false
    volumes:
      - authentik_media:/media
      - authentik_custom_templates:/templates
      - authentik_certs:/certs
    networks:
      - FuzeInfra # Connect to shared infrastructure
      - fuzefront
    external_links:
      - shared-postgres:shared-postgres
      - shared-redis:shared-redis
    restart: unless-stopped

  # ================================
  # PERMIT.IO AUTHORIZATION (PDP)
  # ================================
  permit-pdp:
    image: permitio/pdp-v2:latest
    container_name: fuzefront-permit-pdp
    environment:
      PDP_API_KEY: ${PERMIT_API_KEY:-your-permit-api-key-here}
      PDP_DEBUG: ${PERMIT_DEBUG:-True}
      PDP_ENABLE_OFFLINE_MODE: ${PERMIT_OFFLINE_MODE:-false}
      # Optional: Expose OPA for direct access
      OPAL_INLINE_OPA_ENABLED: true
    ports:
      - '${PERMIT_PDP_PORT:-7766}:7000' # Main PDP API
      - '${PERMIT_OPA_PORT:-8181}:8181' # Direct OPA access (optional)
    volumes:
      - permit_pdp_backup:/app/backup # For offline mode backups
    networks:
      - fuzefront
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:7000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Volumes for persistent data (if needed locally)
volumes:
  fuzefront_logs:
    name: fuzefront_logs

  # Authentik volumes
  authentik_media:
    name: fuzefront_authentik_media
  authentik_custom_templates:
    name: fuzefront_authentik_templates
  authentik_certs:
    name: fuzefront_authentik_certs

  # Permit.io PDP volumes
  permit_pdp_backup:
    name: fuzefront_permit_pdp_backup
