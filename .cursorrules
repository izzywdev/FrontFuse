# FuzeFront Development Rules

## DNS-Based Architecture & Port Allocation Rules
- **ALWAYS use DNS-based routing through nginx** - Services should be accessed via `fuzefront.dev.local`, not direct ports
- **ALWAYS use port allocator** to prevent conflicts and assign ports systematically
- **NO direct port mappings** in docker-compose.yml - services communicate internally through Docker networks
- **Use FuzeInfra shared nginx** for reverse proxy and load balancing
- Access pattern: `http://fuzefront.dev.local/` (frontend), `http://fuzefront.dev.local/api/` (backend), `http://fuzefront.dev.local/health` (health)

## Port Allocation System
- **Frontend services**: 3000-3999 range (FuzeFront frontend: 3001)
- **Backend APIs**: 5000-5999 range (FuzeFront backend: 3002) 
- **Database services**: 6000-6999 range
- **Cache services**: 7000-7999 range
- Use `cd FuzeInfra/tools/port-allocator && python port-allocator.py allocate <project-name> --num-ports <count>` to allocate ports
- Update .env file with allocated ports using `cd envmanager && python env_manager.py add "BACKEND_PORT=<port>"`

## Nginx Configuration
- Main nginx runs on port 80/443 (`fuzeinfra-nginx` container)
- Project configs in `FuzeInfra/infrastructure/shared-nginx/conf.d/`
- Use `docker exec fuzeinfra-nginx nginx -s reload` after config changes
- DNS resolver configured for dynamic upstream resolution
- WebSocket support enabled for development

## Shared Infrastructure Rules
- **NEVER restart, stop, or recreate shared infrastructure containers**
- Shared infra containers include: shared-postgres, shared-mongodb, shared-redis, shared-kafka, shared-rabbitmq, shared-prometheus, shared-grafana, shared-elasticsearch, shared-neo4j, **fuzeinfra-nginx**
- These containers should remain running across all development sessions
- Use existing connections to shared services rather than spinning up new instances
- If shared services are not running, start them with: `cd FuzeInfra && docker-compose -f docker-compose.shared-infra.yml up -d`

## Database Rules
- Always use the shared PostgreSQL database (shared-postgres) instead of SQLite
- Database host: localhost:5432
- Default database: fuzefront_platform
- Use migration-based approach for schema changes

## Development Workflow
- Check shared infra status before starting development
- Keep shared services running to maintain data persistence
- Use environment manager (envmanager) for configuration management
- Test against shared infrastructure, not isolated containers
- **Access services via DNS**: `http://fuzefront.dev.local` not `http://localhost:3010`

## Docker Compose Rules
- **NO port mappings** for internal services (frontend, backend, task manager)
- Services connect via internal Docker networks (FuzeInfra, fuzefront)
- Only expose ports for services that need external access (authentik, permit-pdp)
- Use environment variables from .env file: `env_file: - .env`
- Override specific variables in environment section: `PORT=${BACKEND_PORT:-3002}`

## Documentation Rules
- **ALWAYS export chat history before every commit**
- Export chat conversations to `docs/chats/` folder
- Use naming convention: `[YYYY-MM-DD]_[HH-mm]_chat.md`
- Use the helper script: `.\scripts\export-chat.ps1 "Topic description"`
- Include conversation summary, key achievements, and technical details
- Document any architectural decisions or important code changes
- Chat histories serve as development documentation and decision records

# FuzeFront Task Planning Rules

## Epic and User Story Structure

### Frontend-Related User Stories
For each frontend user story, create the following subtasks:

#### UX Design Subtasks
- **Title**: "UX Design: [Component/Feature Name]"
- **Details Must Include**:
  - Figma component specifications
  - Design system compliance (colors, typography, spacing)
  - User interaction flows and states
  - Responsive design considerations (mobile, tablet, desktop)
  - Accessibility requirements (WCAG 2.1 AA compliance)
  - Error states and loading states
  - Animation and micro-interaction specifications
  - Component variants and props
  - Design tokens usage
  - Dark/light theme support

#### Frontend Implementation Subtasks
Create one subtask per UI component with:
- **Title**: "Frontend: [Specific Component Name]"
- **Technical Details**:
  - React component specifications
  - Libraries to be used (specify versions)
  - API endpoints called (link to Swagger/OpenAPI docs)
  - External API documentation references
  - State management approach (Context, Redux, Zustand)
  - Algorithms implementation details
  - Performance considerations (lazy loading, memoization)
  - Testing requirements (unit, integration, e2e)
  - TypeScript interfaces and types
  - Error handling and fallback strategies
  - Accessibility implementation (ARIA labels, keyboard navigation)

### Backend-Related User Stories
For each backend endpoint, create subtasks with:

#### Backend API Subtasks
- **Title**: "Backend API: [HTTP Method] [Endpoint Path]"
- **Technical Specifications**:
  - Complete OpenAPI/Swagger specification
  - Request/Response schemas with examples
  - Authentication and authorization requirements
  - Rate limiting specifications
  - Validation rules and error responses
  - Database operations and queries
  - External API integrations (with documentation links)
  - Algorithms and business logic implementation
  - Security considerations:
    - Input sanitization and validation
    - SQL injection prevention
    - CSRF protection
    - Data encryption requirements
  - Performance optimizations:
    - Database indexing strategies
    - Caching implementation
    - Pagination and filtering
    - Query optimization
  - DevOps considerations:
    - Environment variables and secrets management
    - Horizontal scaling requirements
    - Database migration strategies
    - Monitoring and logging requirements
    - Health check implementations
    - Container resource requirements

### Security Standards
- All endpoints must implement proper authentication
- Input validation on all parameters
- Output sanitization for XSS prevention
- Rate limiting for abuse prevention
- Audit logging for sensitive operations
- HTTPS enforcement
- CORS configuration

### Performance Standards
- API response times < 200ms for 95% of requests
- Database query optimization
- Proper indexing strategies
- Caching where appropriate
- Pagination for large datasets
- Connection pooling for databases

### Documentation Requirements
- OpenAPI/Swagger for all endpoints
- Component documentation in Storybook
- API usage examples
- Error code documentation
- Security implementation guides

### Testing Requirements
- Unit tests for all components and functions
- Integration tests for API endpoints
- End-to-end tests for critical user flows
- Performance testing for high-load scenarios
- Security testing for vulnerability assessment

### Accessibility Requirements
- WCAG 2.1 AA compliance
- Keyboard navigation support
- Screen reader compatibility
- High contrast mode support
- Focus management
- ARIA labels and descriptions

### Internationalization
- Text externalization for all user-facing strings
- RTL language support consideration
- Date/time formatting
- Number and currency formatting
- Locale-specific validations 